[gcode_macro SMART_HOME]
# rename_existing: G28.1
description: Home axis if not homed already
gcode:
  G90
    # {% if printer.toolhead.homed_axes == "xyz" %}
    {% if "xyz" in printer.toolhead.homed_axes %}
        RESPOND TYPE=echo_no_space MSG="Printer is already homed"
    {% else %}
        RESPOND TYPE=echo_no_space MSG="Printer not fully homed. Homing printer ..."
        {% if "_STATUS_HOMING" in printer.gcode.commands %}
            _STATUS_HOMING         # Sets SB-leds to homing-mod
        {% endif %}
        G28 {rawparams}
        {% if "_STATUS_READY" in printer.gcode.commands %}
            _STATUS_READY         # Sets SB-leds to status_ready
        {% endif %}
    {% endif %}

[gcode_macro Z_TILT_ADJUST]
rename_existing: Z_TILT_ADJUST_BASE
description: Correct z_tilt if not done already
gcode:
    SMART_HOME
    {% if printer.z_tilt.applied %}
        RESPOND TYPE=echo_no_space MSG="Z Tilt already completed"
    {% else %}
        RESPOND TYPE=echo_no_space MSG="Calibrating Z Tilt ..."
        {% if "_STATUS_LEVELING" in printer.gcode.commands %}
            _STATUS_LEVELING # Sets SB-leds to leveling-mode
        {% endif %}
        G0 Z10 F3000
        G0 X30 Y5 F20000
        M400
        Z_TILT_ADJUST_BASE horizontal_move_z=10 retries=0 retry_tolerance=1.0
        Z_TILT_ADJUST_BASE horizontal_move_z=2 retry_tolerance=0.007
        {% if "_STATUS_READY" in printer.gcode.commands %}
            _STATUS_READY         # Sets SB-leds to status_ready
        {% endif %}
    {% endif %}



[gcode_macro RAPID_SCAN]
description: Generate a new bed mesh fast (Mesh go brr)
gcode:
  BED_MESH_CALIBRATE

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_BASE
gcode:
  # Calcuate the start position for the bed mesh so we can rapid to it
  # {% set probe_name = printer.probe.name %}
  {% set mesh_start_x = printer.configfile.config.bed_mesh.mesh_min.split(",")[0]|float - printer.configfile.config[printer.probe.name].x_offset|float %}
  {% set mesh_start_y = printer.configfile.config.bed_mesh.mesh_min.split(",")[1]|float - printer.configfile.config[printer.probe.name].y_offset|float %}

  # {% set mesh_start_test = printer.configfile.config.bed_mesh.mesh_min.split(",")[1]|float - printer.configfile.config[printer.probe.name].y_offset|float %}
  # RESPOND TYPE=echo_no_space MSG="mesh_start_y: {mesh_start_y}"
  # RESPOND TYPE=echo_no_space MSG="printer.probe.name: {printer.probe.name}"
  # RESPOND TYPE=echo_no_space MSG="probe_name: {printer.configfile.config[printer.probe.name].y_offset|float}"
  # RESPOND TYPE=echo_no_space MSG="mest_start_test: {mesh_start_test}"
  
  # Reset max speed and velocity
  _RESET_LIMITS
  
  SMART_HOME
  Z_TILT_ADJUST
  BED_MESH_CLEAR

  G90
  G1 Z3 F3000
  G1 X{mesh_start_x} Y{mesh_start_y} F30000 # Rapid to the start of the mesh at 500mm/s
  # G1 Z5 F3000 # Lower down the start of the mesh
  RESPOND TYPE=echo_no_space MSG="Generating a new bed mesh..."
  {% if "_STATUS_MESHING" in printer.gcode.commands %}
      _STATUS_MESHING                     # Sets SB-leds to bed mesh-mode
  {% endif %}
  BED_MESH_CALIBRATE_BASE METHOD=rapid_scan
  {% if "_STATUS_READY" in printer.gcode.commands %}
      _STATUS_READY         # Sets SB-leds to status_ready
  {% endif %}

# {% if printer.bed_mesh.profile_name == '' %}

[gcode_macro _RESET_LIMITS]
description: Reset velocity and acceleration limits
gcode:
  SET_VELOCITY_LIMIT VELOCITY={printer.configfile.config.printer.max_velocity} ACCEL={printer.configfile.config.printer.max_accel} SQUARE_CORNER_VELOCITY={printer.configfile.config.printer.square_corner_velocity}


[gcode_macro PREHEAT]
description: Preheat chamber
gcode:
   {% set target_bed = params.targetbed|default(105)|int %}
  G90
  SMART_HOME
  # Z_TILT_ADJUST

  G0 Z30 F3000
  G0 X150 Y150 F20000
  SET_DISPLAY_TEXT MSG="Heating bed to {target_bed}C"           # Displays info
  {% if "_STATUS_HEATING" in printer.gcode.commands %}
    _STATUS_HEATING                                      # Sets SB-leds to heating-mode
  {% endif %}
  M106 S255                                           # Turns on the PT-fan
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={target_bed} # Sets the target temp for the bed
